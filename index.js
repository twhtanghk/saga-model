// Generated by CoffeeScript 1.12.7
(function() {
  var _, auth, json, put, ref, rest, select, stampit, take;

  _ = require('lodash');

  ref = require('redux-saga/effects'), put = ref.put, take = ref.take, select = ref.select;

  rest = require('redux-saga-rest');

  stampit = require('stampit');

  json = function*(req, next) {
    var error, res;
    res = (yield next(req));
    try {
      res.data = (yield res.json());
    } catch (error1) {
      error = error1;
      throw new Error(res.statusText);
    }
    if (res.ok) {
      return res;
    } else {
      throw new Error(res.data.message || res.statusText);
    }
  };


  /*
  loop for
    acquire oauth2 token
    send req
    if unauthorized
      login till resolved or rejected
    else
      return res
   */

  auth = function*(orgReq, next) {
    var error, headers, req, res, token;
    while (true) {
      req = orgReq.clone();
      token = (yield select(function(state) {
        return state.auth.token;
      }));
      headers = req.headers || new Headers();
      headers.set('Authorization', "Bearer " + token);
      res = (yield next(new Request(req, {
        headers: headers
      })));
      if (res.status === 401) {
        yield put({
          type: 'login'
        });
        yield take(['loginResolve', 'loginReject']);
        error = (yield select(function(state) {
          return state.auth.error;
        }));
        if (error != null) {
          throw new Error(error);
        }
      } else {
        return res;
      }
    }
  };

  module.exports = function(baseUrl) {
    var stamp;
    return stamp = stampit().init(function(props) {
      return _.extend(this, this.parse(props));
    }).methods({
      getStamp: function() {
        return stamp;
      },
      isNew: function() {
        return this[this.getStamp().idAttribute] == null;
      },
      parse: function(data) {
        if (data == null) {
          data = {};
        }
        return data;
      },
      fetch: function() {
        return stamp.api.get(stamp.url(this[this.getStamp().idAttribute]));
      },
      save: function(values) {
        if (values == null) {
          values = {};
        }
        _.extend(this, values);
        if (this.isNew()) {
          return stamp.api.post(stamp.url(), this);
        } else {
          return stamp.api.put(stamp.url(this[this.getStamp().idAttribute]), this);
        }
      },
      destroy: function() {
        return stamp.api.del(stamp.url(this[this.getStamp().idAttribute]));
      }
    }).statics({
      idAttribute: 'id',
      api: (new rest.API(baseUrl)).use(auth).use(json),
      baseUrl: baseUrl,
      url: function(id) {
        var path, ret, url;
        if (id == null) {
          id = '.';
        }
        url = require('url');
        path = require('path');
        ret = url.parse(this.baseUrl);
        ret.pathname = path.join(ret.pathname, id);
        return url.format(ret);
      },
      fetchOne: function(id) {
        var props;
        props = {};
        props[this.idAttribute] = id;
        return this(props).fetch();
      },
      fetchAll: function(data) {
        var headers;
        if (data == null) {
          data = null;
        }
        if (data != null) {
          headers = new Headers({
            'Content-Type': 'application/json',
            'x-http-method-override': 'get'
          });
          return this.api.post(stamp.url(), data, {
            headers: headers
          });
        } else {
          return this.api.get(stamp.url());
        }
      }
    });
  };

}).call(this);
